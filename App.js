import React, { Component } from 'react';
import { View, Text, StyleSheet, TextInput, AppState, Platform, Button} from 'react-native';
import PushController from './PushController';
import PushNotification from 'react-native-push-notification';
import PushNotificationAndroid from 'react-native-push-notification';
import DatePicker from 'react-native-date-picker';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  submit: {
    marginRight: 30,
    marginTop: 30,
  },
});

export default class App extends Component {
  constructor(props) {
    super(props);

    this.handleAppStateChange = this.handleAppStateChange.bind(this);
    this.state = {
      isNotification: false,
      isStopNotification: false,
      date: new Date(),
      text: 'Medicine time!'
    };
  }

  componentDidMount() {
    AppState.addEventListener('change', this.handleAppStateChange);
  }

  componentWillUnmount() {
    AppState.removeEventListener('change', this.handleAppStateChange);
  }

  handleAppStateChange(appState) {
    if (appState === 'background' || 'foreground') {
      //let date = new Date(Date.now() + (this.state.hours * 60 *60 *1000) + (this.state.minutes * 60 * 1000) + (this.state.seconds * 1000));
      let date = new Date(this.state.date);

      if (Platform.OS === 'ios') {
        date = date.toISOString();
      }

      if(this.state.isNotification) {
        if(!this.state.isStopNotification) {
            PushNotification.localNotificationSchedule({
                foreground: true,
                message: this.state.text,
                date
            });
        }
      }
      if(this.state.isStopNotification) {
          PushNotification.cancelAllLocalNotifications()
      }
    //   PushNotification.localNotification({
    //     /* Android Only Properties */
    //     id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //     ticker: "My Notification Ticker", // (optional)
    //     autoCancel: true, // (optional) default: true
    //     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    //     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    //     bigText: "Its time to eat your medicine.", // (optional) default: "message" prop
    //     subText: "This is a subText", // (optional) default: none
    //     color: "red", // (optional) default: system default
    //     vibrate: true, // (optional) default: true
    //     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    //     tag: 'some_tag', // (optional) add tag to message
    //     group: "group", // (optional) add group to message
    //     ongoing: false, // (optional) set whether this is an "ongoing" notification
    //     priority: "high", // (optional) set notification priority, default: high
    //     visibility: "private", // (optional) set notification visibility, default: private
    //     importance: "high", // (optional) set notification importance, default: high
    //     title: "MEDIAID", // (optional)
    //     message: "Sinex 1 tablet", // (required)
    //     playSound: true, // (optional) default: true
    //     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    //     number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    //     repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    //     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    //   });
    //   PushNotification.cancelLocalNotifications({id: '0'});
    }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>
          Choose your notification time.
        </Text>
        <TextInput
          placeholder='Title'
          placeholderTextColor='#afb6b6'
          autoCapitalize='none'
          onChangeText={(text) => this.setState({text})}
          style={{bottom: 5}}
        />
        <DatePicker
          mode= 'datetime'
          date={this.state.date}
          onDateChange={date => this.setState({ date })}
        />
        <View>
            <Button title="Start" onPress={()=>(this.setState({isNotification: true}),this.handleAppStateChange())}/>
            <View style={{marginTop: 30}}>
            {this.state.isNotification ?
            <Button title="Stop" onPress={()=>(this.setState({isStopNotification: true, isNotification: false}),PushNotification.cancelAllLocalNotifications())}/> : null}
            </View>
        </View>
        <PushController />
      </View>
    );
  }
}