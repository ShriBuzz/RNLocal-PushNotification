import React, { Component } from 'react';
import { View, Text, StyleSheet, Picker, AppState, Platform, Button} from 'react-native';
import PushController from './PushController';
import PushNotification from 'react-native-push-notification';
import PushNotificationAndroid from 'react-native-push-notification';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  timePicker: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignContent: 'center',
  },
  picker: {
    width: 100,
    marginLeft: 10,
  },
  submit: {
    marginRight: 30,
    marginTop: 30,
  },
  detail:{
    fontSize: 20,
    marginLeft: 40,
  },
});

export default class App extends Component {
  constructor(props) {
    super(props);

    this.handleAppStateChange = this.handleAppStateChange.bind(this);
    this.state = {
      seconds: 5,
      minutes: 0,
      hours: 0,
      isNotification: false,
      isStopNotification: false,
    };
  }

  componentDidMount() {
    AppState.addEventListener('change', this.handleAppStateChange);
  }

  componentWillUnmount() {
    AppState.removeEventListener('change', this.handleAppStateChange);
  }

  handleAppStateChange(appState) {
    if (appState === 'background' || 'foreground') {
      let date = new Date(Date.now() + (this.state.hours * 60 *60 *1000) + (this.state.minutes * 60 * 1000) + (this.state.seconds * 1000));
      if (Platform.OS === 'ios') {
        date = date.toISOString();
      }

      if(this.state.isNotification) {
        if(!this.state.isStopNotification) {
            PushNotification.localNotificationSchedule({
                foreground: true,
                message: "Medicine Time",
                date
            });
        }
      }
      if(this.state.isStopNotification) {
          PushNotification.cancelAllLocalNotifications()
      }
    //   PushNotification.localNotification({
    //     /* Android Only Properties */
    //     id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //     ticker: "My Notification Ticker", // (optional)
    //     autoCancel: true, // (optional) default: true
    //     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    //     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    //     bigText: "Its time to eat your medicine.", // (optional) default: "message" prop
    //     subText: "This is a subText", // (optional) default: none
    //     color: "red", // (optional) default: system default
    //     vibrate: true, // (optional) default: true
    //     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    //     tag: 'some_tag', // (optional) add tag to message
    //     group: "group", // (optional) add group to message
    //     ongoing: false, // (optional) set whether this is an "ongoing" notification
    //     priority: "high", // (optional) set notification priority, default: high
    //     visibility: "private", // (optional) set notification visibility, default: private
    //     importance: "high", // (optional) set notification importance, default: high
    //     title: "MEDIAID", // (optional)
    //     message: "Sinex 1 tablet", // (required)
    //     playSound: true, // (optional) default: true
    //     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    //     number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    //     repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    //     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    //   });
    //   PushNotification.cancelLocalNotifications({id: '0'});
    }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>
          Choose your notification time.
        </Text>

        <View style={styles.timePicker}>
          <Text style={styles.detail}>
            Hours
          </Text>
          <Text style={styles.detail}>
            Minutes
          </Text>
          <Text style={styles.detail}>
            Seconds
          </Text>
        </View>

        <View style={styles.timePicker}>
          <Picker
            style={styles.picker}
            selectedValue={this.state.hours}
            onValueChange={(hours) => this.setState({ hours })}
          >
            <Picker.Item label="0" value={0} />
            <Picker.Item label="1" value={1} />
            <Picker.Item label="2" value={2} />
            <Picker.Item label="3" value={3} />
          </Picker>

          <Picker
            style={styles.picker}
            selectedValue={this.state.minutes}
            onValueChange={(minutes) => this.setState({ minutes })}
          >
            <Picker.Item label="0" value={0} />
            <Picker.Item label="1" value={1} />
            <Picker.Item label="2" value={2} />
            <Picker.Item label="3" value={3} />
            <Picker.Item label="4" value={4} />
            <Picker.Item label="5" value={5} />
          </Picker>

          <Picker
            style={styles.picker}
            selectedValue={this.state.seconds}
            onValueChange={(seconds) => this.setState({ seconds })}
          >
            <Picker.Item label="5" value={5} />
            <Picker.Item label="10" value={10} />
            <Picker.Item label="15" value={15} />
          </Picker>
        </View>

        <View>
            <Button title="Start" onPress={()=>(this.setState({isNotification: true}),this.handleAppStateChange())}/>
            <View style={{marginTop: 30}}>
            {this.state.isNotification ?
            <Button title="Stop" onPress={()=>(this.setState({isStopNotification: true, isNotification: false}),PushNotification.cancelAllLocalNotifications())}/> : null}
            </View>
        </View>
        <PushController />
      </View>
    );
  }
}
